require "active_support/inflector"
require "erb"
require "fileutils"
require "yaml"
require "tempfile"

require "bundler/gem_tasks"
require "rspec/core/rake_task"

RSpec::Core::RakeTask.new(:spec)

task :default => :spec 
SPECS_DIR = "./amzn-models/models"
FILE_PREFIX = "sp_"
MODULE_PREFIX = ""

GEM_CONFIG = <<-EOF
{
  "gemName": "#{FILE_PREFIX}<%= @config_vars[:gem_name] %>",
  "modulename": "#{MODULE_PREFIX}<%= @config_vars[:module_name] %>",
  "gemRequiredRubyVersion": ">= 2.5"
}
EOF

TARGET_DIR = "./vendor"
TEMPLATES_DIR = "./codegen-templates/ruby"

STDOUT.sync = true

# To run this you need to have SwaggerCodegen installed and have a working
# `swagger-codegen` command.
desc "Uses swagger codegen to generate gem for each api"
namespace :codegen do
  task :generate => [:clean] do
    sh "mkdir -p vendor"

    yml = YAML.load_file("./codegen-config.yml")
    user_agent = yml["user_agent"]

    yml["list_of_apis"].each do |api|
      @config_vars = {
        module_name: ActiveSupport::Inflector.camelize(api["name"]),
        gem_name: api["name"],
      }

      # Passing options via -D{optionName}={optionValue} like in SC docs
      # doesn't work, so we need to pass "real" config file:
      temp = Tempfile.new(api["name"])
      renderer = ERB.new(GEM_CONFIG)
      temp.write(renderer.result)
      temp.close

      # Main conmmand
      sh "swagger-codegen generate -l ruby -t #{TEMPLATES_DIR} \
          -o '#{TARGET_DIR}/#{api["name"]}' -i '#{SPECS_DIR}/#{api["path"]}' \
          --config='#{temp.path}' \
          -Dmodels -DmodellDocs=false -DmodelTests=false \
          -Dapis -DapiDocs=false -DapiTests=false \
          --http-user-agent='#{user_agent}'"

      # Update main gem requires
      File.open("./lib/amazon_sp_clients/#{FILE_PREFIX}#{api["name"]}.rb", "w") do |f|
        f.write("# frozen_string_literal: true\n")
        f.write("\n# This file was autogenerated, do not edit it \n\n")
        f.write(%Q{require_relative "../../vendor/#{api["name"]}/lib/#{FILE_PREFIX}#{api["name"]}.rb"})
        f.write("\n\nmodule AmazonSpClients")
        f.write("\nend")
      end
    end
  end

  desc "Remove generated codegen gems in #{TARGET_DIR}"
  task :clean do
    FileUtils.rm_rf("#{TARGET_DIR}") if Dir.exists?(TARGET_DIR)
    # remove main gem requires
    Dir.glob("./lib/amazon_sp_clients/#{FILE_PREFIX}*").each do
      |file| File.delete(file)
    end
  end
end
