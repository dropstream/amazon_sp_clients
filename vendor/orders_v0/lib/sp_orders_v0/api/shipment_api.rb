=begin
#Selling Partner API for Orders

#The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

module AmazonSpClients
  module SpOrdersV0
    class ShipmentApi
      attr_accessor :api_client

      def initialize(session)
        @api_client = AmazonSpClients::ApiClient.new(session)
      end
      # Update the shipment status.
      # @param body Request to update the shipment status.
      # @param order_id An Amazon-defined order identifier, in 3-7-7 format.
      # @param [Hash] opts the optional parameters
      # @return [nil]
      def update_shipment_status(body, order_id, opts = {})
        update_shipment_status_with_http_info(body, order_id, opts)
        return nil
      end

      # Update the shipment status.
      # @param body Request to update the shipment status.
      # @param order_id An Amazon-defined order identifier, in 3-7-7 format.
      # @param [Hash] opts the optional parameters
      # @return [Array<(nil)>] nil, response status code and response headers
      def update_shipment_status_with_http_info(body, order_id, opts = {})
        if @api_client.config.debugging
          @api_client.config.logger.debug 'Calling API: ShipmentApi.update_shipment_status ...'
        end
        # verify the required parameter 'body' is set
        if @api_client.config.client_side_validation && body.nil?
          fail ArgumentError, "Missing the required parameter 'body' when calling ShipmentApi.update_shipment_status"
        end
        # verify the required parameter 'order_id' is set
        if @api_client.config.client_side_validation && order_id.nil?
          fail ArgumentError, "Missing the required parameter 'order_id' when calling ShipmentApi.update_shipment_status"
        end
        # resource path
        local_var_path = '/orders/v0/orders/{orderId}/shipment'.sub('{' + 'orderId' + '}', order_id.to_s)

        # query parameters
        query_params = opts[:query_params] || {}

        # header parameters
        header_params = opts[:header_params] || {}
        # HTTP header 'Accept' (if needed)
        header_params['Accept'] = @api_client.select_header_accept(['application/json'])
        # HTTP header 'Content-Type'
        header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

        # form parameters
        form_params = opts[:form_params] || {}

        # http body (model)
        post_body = opts[:body] || @api_client.object_to_http_body(body) 

        return_type = opts[:return_type] 

        auth_names = opts[:auth_names] || []
        data = @api_client.call_api(:POST, local_var_path,
          :header_params => header_params,
          :query_params => query_params,
          :form_params => form_params,
          :body => post_body,
          :auth_names => auth_names,
          :return_type => return_type)

        if @api_client.config.debugging
          @api_client.config.logger.debug "API called: ShipmentApi#update_shipment_status\nData: #{data.inspect}"
        end
        return data
      end
    end
  end
end
