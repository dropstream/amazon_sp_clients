=begin
#Selling Partner API for Fulfillment Inbound

#The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

require 'date'

module AmazonSpClients
  module SpFulfillmentInboundV0
    # Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation.
    class InboundShipmentItem
      # A shipment identifier originally returned by the createInboundShipmentPlan operation.
      attr_accessor :shipment_id
  
      # The seller SKU of the item.
      attr_accessor :seller_sku
  
      # Amazon's fulfillment network SKU of the item.
      attr_accessor :fulfillment_network_sku
  
      attr_accessor :quantity_shipped
  
      attr_accessor :quantity_received
  
      attr_accessor :quantity_in_case
  
      attr_accessor :release_date
  
      attr_accessor :prep_details_list
  
      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'shipment_id' => :'ShipmentId',
          :'seller_sku' => :'SellerSKU',
          :'fulfillment_network_sku' => :'FulfillmentNetworkSKU',
          :'quantity_shipped' => :'QuantityShipped',
          :'quantity_received' => :'QuantityReceived',
          :'quantity_in_case' => :'QuantityInCase',
          :'release_date' => :'ReleaseDate',
          :'prep_details_list' => :'PrepDetailsList'
        }
      end
  
      # Attribute type mapping.
      def self.openapi_types
        {
          :'shipment_id' => :'Object',
          :'seller_sku' => :'Object',
          :'fulfillment_network_sku' => :'Object',
          :'quantity_shipped' => :'Object',
          :'quantity_received' => :'Object',
          :'quantity_in_case' => :'Object',
          :'release_date' => :'Object',
          :'prep_details_list' => :'Object'
        }
      end
  
      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new([
        ])
      end
    
      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          fail ArgumentError, "The input argument (attributes) must be a hash in `AmazonSpClients::SpFulfillmentInboundV0::InboundShipmentItem` initialize method"
        end
  
        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            fail ArgumentError, "`#{k}` is not a valid attribute in `AmazonSpClients::SpFulfillmentInboundV0::InboundShipmentItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
          end
          h[k.to_sym] = v
        }
  
        if attributes.key?(:'shipment_id')
          self.shipment_id = attributes[:'shipment_id']
        end
  
        if attributes.key?(:'seller_sku')
          self.seller_sku = attributes[:'seller_sku']
        end
  
        if attributes.key?(:'fulfillment_network_sku')
          self.fulfillment_network_sku = attributes[:'fulfillment_network_sku']
        end
  
        if attributes.key?(:'quantity_shipped')
          self.quantity_shipped = attributes[:'quantity_shipped']
        end
  
        if attributes.key?(:'quantity_received')
          self.quantity_received = attributes[:'quantity_received']
        end
  
        if attributes.key?(:'quantity_in_case')
          self.quantity_in_case = attributes[:'quantity_in_case']
        end
  
        if attributes.key?(:'release_date')
          self.release_date = attributes[:'release_date']
        end
  
        if attributes.key?(:'prep_details_list')
          self.prep_details_list = attributes[:'prep_details_list']
        end
      end
  
      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @seller_sku.nil?
          invalid_properties.push('invalid value for "seller_sku", seller_sku cannot be nil.')
        end
  
        if @quantity_shipped.nil?
          invalid_properties.push('invalid value for "quantity_shipped", quantity_shipped cannot be nil.')
        end
  
        invalid_properties
      end
  
      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @seller_sku.nil?
        return false if @quantity_shipped.nil?
        true
      end
  
      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
            shipment_id == o.shipment_id &&
            seller_sku == o.seller_sku &&
            fulfillment_network_sku == o.fulfillment_network_sku &&
            quantity_shipped == o.quantity_shipped &&
            quantity_received == o.quantity_received &&
            quantity_in_case == o.quantity_in_case &&
            release_date == o.release_date &&
            prep_details_list == o.prep_details_list
      end
  
      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end
  
      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [shipment_id, seller_sku, fulfillment_network_sku, quantity_shipped, quantity_received, quantity_in_case, release_date, prep_details_list].hash
      end
  
      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        new.build_from_hash(attributes)
      end
  
      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        self.class.openapi_types.each_pair do |key, type|
          if type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
            self.send("#{key}=", nil)
          end
        end
  
        self
      end
  
      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :DateTime
          DateTime.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          AmazonSpClients::SpFulfillmentInboundV0.const_get(type).build_from_hash(value)
        end
      end
  
      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end
  
      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end
  
      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end
  
          hash[param] = _to_hash(value)
        end
        hash
      end
  
      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end

  end
end
