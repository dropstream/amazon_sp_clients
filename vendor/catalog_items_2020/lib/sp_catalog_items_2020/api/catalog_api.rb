=begin
#Selling Partner API for Catalog Items

#The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.

OpenAPI spec version: 2020-12-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module AmazonSpClients
  module SpCatalogItems2020
    class CatalogApi
      attr_accessor :api_client

      def initialize(api_client = ApiClient.default)
        @api_client = api_client
      end
      # Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
      # @param asin The Amazon Standard Identification Number (ASIN) of the item.
      # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
      # @param [Hash] opts the optional parameters
      # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response.
      # @return [Item]
      def get_catalog_item(asin, marketplace_ids, opts = {})
        data = get_catalog_item_with_http_info(asin, marketplace_ids, opts)
        return data
      end

      # Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
      # @param asin The Amazon Standard Identification Number (ASIN) of the item.
      # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
      # @param [Hash] opts the optional parameters
      # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response.
      # @return [Array<(Item)>] Item data, response status code and response headers
      def get_catalog_item_with_http_info(asin, marketplace_ids, opts = {})
        if @api_client.config.debugging
          @api_client.config.logger.debug 'Calling API: CatalogApi.get_catalog_item ...'
        end
        # verify the required parameter 'asin' is set
        if @api_client.config.client_side_validation && asin.nil?
          fail ArgumentError, "Missing the required parameter 'asin' when calling CatalogApi.get_catalog_item"
        end
        # verify the required parameter 'marketplace_ids' is set
        if @api_client.config.client_side_validation && marketplace_ids.nil?
          fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling CatalogApi.get_catalog_item"
        end
        if @api_client.config.client_side_validation && opts[:'included_data'] && !opts[:'included_data'].all? { |item| ['attributes', 'identifiers', 'images', 'productTypes', 'salesRanks', 'summaries', 'variations', 'vendorDetails'].include?(item) }
          fail ArgumentError, 'invalid value for "included_data", must include one of attributes, identifiers, images, productTypes, salesRanks, summaries, variations, vendorDetails'
        end
        # resource path
        local_var_path = '/catalog/2020-12-01/items/{asin}'.sub('{' + 'asin' + '}', asin.to_s)

        # query parameters
        query_params = opts[:query_params] || {}
        query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
        query_params[:'includedData'] = @api_client.build_collection_param(opts[:'included_data'], :csv) if !opts[:'included_data'].nil?

        # header parameters
        header_params = opts[:header_params] || {}
        # HTTP header 'Accept' (if needed)
        header_params['Accept'] = @api_client.select_header_accept(['application/json'])

        # form parameters
        form_params = opts[:form_params] || {}

        # http body (model)
        post_body = opts[:body] 

        return_type = opts[:return_type] || 'AmazonSpClients::ApiResponse' 

        auth_names = opts[:auth_names] || []
        data = @api_client.call_api(:GET, local_var_path,
          :header_params => header_params,
          :query_params => query_params,
          :form_params => form_params,
          :body => post_body,
          :auth_names => auth_names,
          :return_type => return_type)

        if @api_client.config.debugging
          @api_client.config.logger.debug "API called: CatalogApi#get_catalog_item\nData: #{data.inspect}"
        end
        return data
      end
    end
  end
end
